{"version":3,"sources":["Components/Crypto/CryptoList/CryptoListItem/CryptoListItem.js","Components/Crypto/CryptoList/CryptoList.js","Components/Crypto/Crypto.js","App.js","serviceWorker.js","index.js"],"names":["CryptoListItem","props","_this","Object","classCallCheck","this","_super","call","getData","axios","get","currency","then","response","setState","flag","data","catch","error","console","log","state","react_default","a","createElement","className","src","alt","class","lastRate","symbol","Component","CryptoList","crypto","map","CryptoList_CryptoListItem_CryptoListItem","key","Crypto","newCryptoList","oldCryptoList","cryptoList","keys","newObject","last","oldObject","find","push","_this2","setInterval","Crypto_CryptoList_CryptoList","App","Components_Crypto_Crypto","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5fa4823d.chunk.js","sourcesContent":["import React, {Component} from \"react\";\r\nimport axios from \"axios\";\r\nimport './CryptoListItem.sass'\r\n\r\nclass CryptoListItem extends Component{\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\tflag: '',\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tthis.getData();\r\n\t}\r\n\r\n\tgetData = () =>{\r\n\t\taxios.get(\"https://restcountries.eu/rest/v2/currency/\"+this.props.currency.currency)\r\n\t\t.then(response => {\r\n\t\t\tthis.setState({flag: response.data[0].flag});\r\n\t\t})\r\n\t\t.catch(function(error){\r\n\t\t\tconsole.log(error);\r\n\t\t});\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn(\r\n\t\t\t<div className=\"CryptoListItem\">\r\n\t\t\t\t<img src={this.state.flag} alt=\"Flag\" className=\"CryptoListItem__flag\"/>\r\n\t\t\t\t<span className=\"CryptoListItem__currency-name\">{this.props.currency.currency}</span>\r\n\t\t\t\t<div className=\"CryptoListItem__content\">\r\n\t\t\t\t\t<span className={this.props.currency.class}>{this.props.currency.lastRate} {this.props.currency.symbol}</span> \r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\n\r\nexport default CryptoListItem;","import React from \"react\";\r\nimport './CryptoList.sass';\r\nimport CryptoListItem from \"./CryptoListItem/CryptoListItem\";\r\n\r\nconst CryptoList = (props) => {\r\n\treturn(\r\n\t\t<div className=\"CryptoList\">\r\n\t\t\t{props.crypto.map(currency =>\r\n\t\t\t\t<CryptoListItem currency={currency} key={currency.currency} />\r\n\t\t\t\t)}\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default CryptoList;","import axios from \"axios\";\r\nimport React, {Component} from \"react\";\r\nimport CryptoList from \"./CryptoList/CryptoList\";\r\n\r\nclass Crypto extends Component{\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\tcryptoList: []\r\n\t\t}\r\n\t}\r\n\t\r\n\tcomponentDidMount() {\r\n\t\tthis.getData();\r\n\r\n\t\tsetInterval(() =>{\r\n\t\t\tthis.getData()\r\n\t\t}, 5000);\r\n\t}\r\n\r\n\tgetData = () =>{\r\n\t\taxios.get(\"https://blockchain.info/pl/ticker\")\r\n\t\t.then(response => {\r\n\t\t\tconst { data } = response;\r\n\t\t\tlet newCryptoList = [];\r\n\t\t\tconst oldCryptoList = this.state.cryptoList;\r\n\r\n\t\t\tObject.keys(data).map(currency =>{\r\n\t\t\t\tconst newObject = {\r\n\t\t\t\t\tcurrency: currency,\r\n\t\t\t\t\tlastRate: data[currency].last,\r\n\t\t\t\t\tsymbol: data[currency].symbol,\t\t\t\t\t\r\n\t\t\t\t};\r\n\r\n\t\t\t\tlet oldObject = oldCryptoList.find(oldObject => {\r\n\t\t\t\t\tif (oldObject.currency === newObject.currency) return oldObject;\r\n\t\t\t\t\treturn {};\r\n\t\t\t\t});\r\n\t\t\t\tif (oldObject) {\r\n\t\t\t\t\t\r\n\t\t\t\t\tnewObject.class = \"blue\";\r\n\r\n\t\t\t\t\tif (oldObject.lastRate < newObject.lastRate){\r\n\t\t\t\t\t\tnewObject.class = \"green\";\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if(oldObject.lastRate > newObject.lastRate){\r\n\t\t\t\t\t\tnewObject.class = \"red\";\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tnewCryptoList.push(newObject);\r\n\r\n\t\t\t\treturn null;\r\n\t\t\t});\r\n\t\t\tthis.setState({cryptoList: newCryptoList});\r\n\t\t})\r\n\t\t.catch(function(error){\r\n\t\t\tconsole.log(error);\r\n\t\t});\r\n\t}\r\n\t\r\n\trender(){\r\n\t\treturn(\r\n\t\t\t<CryptoList crypto={this.state.cryptoList}/>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Crypto;","import './App.css';\r\nimport React from 'react';\r\nimport Crypto from './Components/Crypto/Crypto';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"header\">\r\n        <img src=\"./assets/bitcoin.png\" alt=\"bitcoin\" className=\"logo\"/>\r\n        <h1><span className=\"mobileHide\">itCoin </span>exchange rate</h1>\r\n      </div>\r\n      <Crypto />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}